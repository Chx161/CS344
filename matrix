#!/bin/bash

# This function outputs a matrix dimensions "row col"
dims() {
  datafilepath="datafile$$" # for input
  trap "rm -f $datafilepath; find | grep 'tempFile.*' | xargs rm -f; echo 'SIGINT received: Deleting temp file then exiting!'; exit 1" INT
  trap "rm -f $datafilepath; find | grep 'tempFile.*' | xargs rm -f" EXIT
  # Test number of args. If more than 1, invalid input
  if [ $# -gt 1 ]
  then
    echo "Invalid number of args" 1>&2    # echo defaults to stdout.
                                          # Use 1 > &2 redirect stdout to stderr
    exit 1
  fi
  # Get input from file or stdin
  # File name not provided, input from stdin
  if [ "$#" = "0" ]
  then
    cat > "$datafilepath"
  # File name given, check if readable or not
  elif [ "$#" = "1" ]
  then
    datafilepath=$1
    # File not readable, terminate and exit 1
    if [ ! -r $datafilepath ]
    then
      echo "File not readable" 1>&2
      exit 1
    fi
  fi
  # Valid matrix available, get dimensions
  row=0
  col=0
  while read line
  do
    # echo "$line"
    for num in $line
    do
      col=`expr $col + 1`
    done
    row=`expr $row + 1`
  done < $datafilepath      # "${1:-/dev/stdin}"
  col=`expr $col / $row`
  echo "$row $col"
  return 0
}

# This function transposes m*n matrix to n*m matrix
# Reference: https://www.thelinuxrain.com/articles/transposing-rows-and-columns-3-methods
transpose() {
  datafilepath="datafile$$" # for input
  tempFile="tempFile$$"  # for output
  trap "rm -f $tempFile $datafilepath; echo 'SIGINT received: Deleting temp file then exiting!'; exit 1" INT
  trap "rm -f $tempFile $datafilepath" EXIT
  # Test number of args. If more than 1, invalid input
  if [ $# -gt 1 ]
  then
    echo "Invalid number of args" 1>&2    # echo defaults to stdout.
                                          # Use 1 > &2 redirect stdout to stderr
    exit 1
  fi
  # Get input from file or stdin
  # File name not provided, input from stdin
  if [ "$#" = "0" ]
  then
    cat > "$datafilepath"
  # File name given, check if readable or not
  elif [ "$#" = "1" ]
  then
    datafilepath=$1
    # File not readable, terminate and exit 1
    if [ ! -r $datafilepath ]
    then
      echo "File not readable" 1>&2
      # return 1
      exit 1
    fi
  fi
  # Valid matrix available, tranpose it
  # Count number of columns
  num=$(head -n 1 "$datafilepath" | wc -w)
  # For each column, cut it, transpose into a line and append
  for ((i=1; i<="$num"; i++))
  do
    cut -f"$i" $datafilepath | paste -s >> $tempFile
  done
  # Direct output from file to stdout
  cat $tempFile
  return 0
}

# This function computes mean of each column in a matrix and outputs a 1*n vector
mean() {
  datafilepath="datafile$$" # for input
  tempFile="tempFile$$"       # for tranposed input
  tempFile_2="tempFile_2$$"   # for unprocessed output
  tempFile_3="tempFile_3$$"   # for final output
  trap "rm -f $datafilepath $tempFile $tempFile_2 $tempFile_3; echo 'SIGINT received: Deleting temp file then exiting!'; exit 1" INT
  trap "rm -f $datafilepath $tempFile $tempFile_2 $tempFile_3" EXIT
  # Test number of args. If more than 1, invalid input
  if [ $# -gt 1 ]
  then
    echo "Invalid number of args" 1>&2    # echo defaults to stdout.
                                          # Use 1 > &2 redirect stdout to stderr
    exit 1
  fi
  # Get input from file or stdin
  # File name not provided, input from stdin
  if [ "$#" = "0" ]
  then
    cat > "$datafilepath"
  # File name given, check if readable or not
  elif [ "$#" = "1" ]
  then
    datafilepath=$1
    # File not readable, terminate and exit 1
    if [ ! -r $datafilepath ]
    then
      echo "File not readable" 1>&2
      exit 1
    fi
  fi
  # Valid matrix available, transpose it before computing mean
  # Count number of columns
  num=$(head -n 1 "$datafilepath" | wc -w)
  # For each column, cut it, transpose into a line and append
  for ((i=1; i<="$num"; i++))
  do
    cut -f"$i" $datafilepath | paste -s >> $tempFile
  done
  # Compute mean
  while read line
  do
    count=0     # Reset count and sum for each line
    sum=0
    for num in $line
    do
      # echo "num = $num"
      sum=`expr $sum + $num`
      count=`expr $count + 1`
    done
    # mean=`expr $sum / $count`
    # Round mean to ints before writing to output
    if [ "$sum" -gt "0" ]
    then
      sum=`expr $sum + $count / 2`
      mean=`expr $sum / $count`
    else
      sum=`expr $sum - $count / 2`
      mean=`expr $sum / $count`
    fi
    echo "$mean" >> $tempFile_2
  done < $tempFile      #"${1:-/dev/stdin}"
  # Transpose n*1 vector to 1*n vector
  cut -f"$i" $tempFile_2 | paste -s >> $tempFile_3
  cat $tempFile_3
  return 0
}

# This function adds two matrices
add() {
  tempFile="tempFile$$"       # for input matrix dimensions
  tempFile_2="tempFile_2$$"   # for input matrix dimensions
  tempFile_3="tempFile_3$$"   # for output
  tempFile_4="tempFile_4$$"   # for output
  trap "find | grep 'tempFile.*' | xargs rm -f; echo 'SIGINT received: Deleting temp file then exiting!'; exit 1" INT
  trap "find | grep 'tempFile.*' | xargs rm -f" EXIT
  # Test number of args. If more than 1, invalid input
  if [ ! $# -eq 2 ]
  then
    echo "Invalid number of args" 1>&2    # echo defaults to stdout.
                                          # Use 1 > &2 redirect stdout to stderr
    exit 1
  fi
  # 2 args, check if files are readable
  if [ ! -r "$1" ] && [ ! -r "$2" ]
  then
    echo "File not readable" 1>&2
    exit 1
  fi
  # Check matrix dimension match
  # Write two matrices' dimensions to a file in two rows and compare
  dims "$1" > "$tempFile"
  dims "$2" >> "$tempFile_2"
  read row_1 < "$tempFile"
  read row_2 < "$tempFile_2"
  read m1_row m1_col < "$tempFile"
  read m2_row m2_col < "$tempFile_2"
  # Mismatched, terminate script
  if [ ! $m1_row -eq $m2_row ] || [ ! $m1_col -eq $m2_col ]
  then
    echo "Mismatched matrixes" 1>&2; exit 1
  fi
  # Matrices match, do addition
  # About reading two files simultaneourly, direct input to two file descriptors, reference:
  # https://github.com/Ryanwall15/CS344-Matrix/blob/master/matrix
  # Read m1 matrix into n*1 matrix, output to tempFile_3
  while read line
  do
    for i in $line
    do
      num="$i"
      echo "$num" >> $tempFile_3
    done
  done <"$1"
  # Read m2 matrix into n*1 matrix, output to tempFile_4
  while read line
  do
    for i in $line
    do
      num="$i"
      echo "$num" >> $tempFile_4
    done
  done <"$2"
  # Output sums to n*1 matrix
  echo -n "" > $tempFile
  echo -n "" > $tempFile_2
  while read m1_line <&3 && read m2_line <&4
  do
    var_1=$m1_line
    var_2=$m2_line
    sum=`expr $var_1 + $var_2`
    echo "$sum" >> $tempFile
  done 3<"$tempFile_3" 4<"$tempFile_4"
  # Format sums in tempFile into matrix
  # count=$((m1_col*m1_row))
  count=0
  while read line
  do
    count=`expr $count + 1`
    element=$line
    echo -n $element >> $tempFile_2 # Write a number
    mod=$(($count % $m1_col))
    if [ $mod -eq 0 ]         # Write a tab or newline
    then
      echo >> $tempFile_2
    else
      echo -ne '\t' >> $tempFile_2
    fi
  done <"$tempFile"
  cat $tempFile_2
  # sleep 100
  return 0
}

# This function does matrix multiplication
multiply() {
  tempFile="tempFile$$"
  tempFile_2="tempFile_2$$"
  trap "find | grep 'tempFile.*' | xargs rm -f; echo 'SIGINT received: Deleting temp file then exiting!'; exit 1" INT
  trap "find | grep 'tempFile.*' | xargs rm -f" EXIT
  # Test number of args. If more than 1, invalid input
  if [ ! $# -eq 2 ]
  then
    echo "Invalid number of args" 1>&2    # echo defaults to stdout.
                                          # Use 1 > &2 redirect stdout to stderr
    exit 1
  fi
  # 2 args, check if files are readable
  if [ ! -r "$1" ] && [ ! -r "$2" ]
  then
    echo "File not readable" 1>&2
    exit 1
  fi
  # Check matrix dimension match
  # Write two matrices' dimensions to a file in two rows and compare
  dims "$1" > "$tempFile"
  dims "$2" > "$tempFile_2"
  read row_1 < "$tempFile"
  read row_2 < "$tempFile_2"
  read m1_row m1_col < "$tempFile"
  read m2_row m2_col < "$tempFile_2"
  # Mismatched, terminate script
  if [ ! $m1_col -eq $m2_row ]
  then
    echo "Mismatched matrixes" 1>&2; exit 1
  fi
  # Matrices match, do multiplication
  # Transpose m2 matrix, output to tempFile
  echo -n "" > $tempFile
  for ((i=1; i<="$m2_col"; i++))
  do
    cut -f"$i" $2 | paste -s >> $tempFile
  done
  # Do multiplication
  echo -n "" > $tempFile_2  # For unformated output
  sum=0
  for ((i=1; i<="$m1_row"; i++))
  do
    for ((k=1; k<="$m2_col"; k++))
    do
      sum=0
      for ((j=1; j<="$m1_col"; j++))
      do
        # var_1=`cut -d$'\n' -f $i $1 | cut -f"$j"`
        # sed -n 10p file.txt
        var_1=`cat "$1" | head -n $i | tail -n 1 | cut -f"$j"`
        var_2=`cat "$tempFile" | head -n $k | tail -n 1 | cut -f"$j"`
        prod=$((var_1*var_2))
        sum=`expr $sum + $prod`
      done
      echo $sum >> $tempFile_2  # Output products to tempFile_2 for formatting
    done
  done
  # Formart products for final output
  echo -n "" > $tempFile  # For formated output
  while read line
  do
    count=`expr $count + 1`
    element=$line     # Store line in a var as a number
    echo -n $element >> $tempFile # Write a number
    mod=$(($count % $m2_col))
    if [ $mod -eq 0 ]         # Write a tab or newline
    then
      echo >> $tempFile
    else
      echo -ne '\t' >> $tempFile
    fi
  done <"$tempFile_2"
  cat $tempFile
  return 0
}

"$@"
